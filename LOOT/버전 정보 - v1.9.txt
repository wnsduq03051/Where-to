LOOT 프로젝트 버전 정보

Version 1.9

LOOT는 Library for Object-Oriented Term-project의 줄임말이며
LOOT에는 객체지향프로그래밍 및 관련 수업을 듣는 학생들이 텀 프로젝트를 수행할 때 사용할 수 있는 여러 기능들이 포함되어 있습니다.
LOOT에 대한 자세한 설명은 프로젝트 폴더에 있는 참조 문서, 또는 동봉된 JavaDoc을 참고하세요.


버전별 주요 변경사항

v1.0

	- 게임 내부 구조의 핵심이 되는 GameLoop를 제공합니다.
		> GameLoop는 게임 내의 각 frame을 주어진 시간 간격에 따라 호출해 줍니다.
	
	- Image들을 읽어 오고 손쉽게 다룰 수 있게 해 주는 ImageResourceManager를 제공합니다.
		> 읽어 올 수 있는 그림 파일의 형식은 크게 제한되어 있지 않으며
		  이 때 일부 파일 형식이 지원하는 '투명도'를 자동으로 Image에 반영해 줍니다.
	

v1.0 -> v1.1

	- 음원 재생을 담당하는 AudioManager가 추가되었습니다.
		> 음원 파일을 불러오고 이를 여러 채널에 걸쳐 동시에 재생할 수 있는 기능을 제공합니다.

		> 음원 재생을 중단하는 기능을 제공합니다.

		> 아쉽게도, 재생할 수 있는 음원 파일의 형식은 현재 매우 한정되어 있습니다.
		  AudioManager를 사용하여 음원을 재생할 때는 꼭 강사의 도움을 받으세요.
	
	- 키보드 / 마우스 입력을 처리하여 여러분의 프로젝트에서 손쉽게 다룰 수 있는 가상 버튼으로 추상화해 주는 InputManager가 추가되었습니다.
		> 키보드의 각 키 및 마우스의 각 버튼을 여러분이 지정한 가상 버튼에 bind해 사용할 수 있는 기능을 제공합니다.

		> 게임 화면 상에 있는 마우스 포인터의 위치 정보를 제공합니다. 

	- 라이브러리의 규모가 확장됨에 따라, 여러분의 프로젝트를 시작하기 위해 필요한 기본 요소들을 미리 구성해 둔 GameFrame이 추가되었습니다.
		> 또한, GameFrame에는 여러분이 프로젝트에서 주로 사용하게 될 몇몇 작업을 미리 구현해 둔 메서드들이 포함되어 있습니다.

		> 일반적인 경우, GameFrame을 상속받는 새 클래스를 생성하여 여러분의 프로젝트를 시작하게 됩니다.
				
	- '화면에 그릴 수 있는 요소'를 추상화하는 DrawableObject 형식이 추가되었습니다.
		> 이 클래스에는 게임 화면에 해당 요소를 그리기 위한 기본 정보가 포함되어 있으며
		  이를 적절히 설정한 다음 GameFrame의 특정 메서드를 호출하도록 하여 그리기 작업을 간단히 구성할 수 있습니다.


v1.1 -> v1.2

	* 주의: 몇몇 요소의 인터페이스가 변경되었으며 따라서 v1.2 이전 버전과의 호환성은 지원되지 않습니다.
	
	- 복잡한 그리기 작업에 필요한 요소들을 구현해 두기 위해 DrawableObject, GameFrame의 구조가 변경되었습니다.

	- '화면에 그릴 수 있는 요소'는 이제 몇몇 클래스 사이의 계층 관계로 표현되어 있습니다. 자세한 내용은 참조 문서를 참고하세요.
	  
	- 2차원 화면과 3차원 가상 공간 사이의 좌표 매핑에 필요한 기본 기능을 제공합니다.
		> Viewport를 통해 3차원 가상 공간 안의 특정 요소를 2차원 화면 영역에 그릴 수 있습니다.
		  이 때 Viewport는 초보적인 '카메라 조작' 기능을 통해 가상 공간의 어떤 곳을 화면에 그릴 것인지 결정합니다.
		
		> 화면 상의 특정 좌표에 현재 어떤 요소가 그려져 있는지를 추적하기 위한 메서드들을 제공합니다.
		  Viewport는 이를 확장하여 2차원 화면상의 특정 좌표를 3차원 가상 공간 안의 좌표로 변환하는 기능을 제공합니다.


v1.2 -> v1.3

	- 테스트를 위해 문자열을 화면에 적을 수 있는 TextBox가 추가되었습니다.
		> text 필드의 값을 변경하고 Draw(g)를 호출하면 해당 문자열을 화면에 적어 줍니다.
		> 문자열 그리기 기능은 생각보다 꽤 무거운 작업이므로 최종 버전의 프로그램에서는 TextBox를 가급적 사용하지 않는 편이 좋습니다.
	
		
v1.3 -> v1.4

	* 주의: 내부적으로 float 대신 double을 사용하는 것으로 변경되었으며 따라서 v1.4 이전 버전을 사용하던 코드는 약간의 수정을 해야 합니다.

	- Layer 계열 클래스들의 그리기 방식이 다소 변화되었습니다.
	
		> 이제 내부 요소의 좌표를 지정할 때 선형 변환을 함께 이용합니다.
		
		> 이제 Viewport 뿐만 아니라 Layer도 내부 요소의 확대 / 축소 기능을 제공합니다.
		
		> 이와 함께, 외부 / 내부 좌표계 사이의 좌표 변환을 위한 기본적인 메서드들이 각 클래스에 추가되었습니다.

	- 내부 요소를 회전시켜 그려 주는 RotatableLayer가 추가되었습니다.
	
		> rotate_origin_x, rotate_origin_y를 통해 회전 중심 위치를 지정한 다음 angle을 변경하여 내부 요소를 회전시킬 수 있습니다.
		
		> 주의:	Viewport와 RotatableLayer를 함께 사용하는 경우 화면 가장자리에서 '원래 보여야 할 요소'가 안 보일 수 있습니다.
				2014년 텀 프로젝트에서는 이러한 알려진 오류로 인해 불편을 겪는 팀은 없으므로 그냥 사용하면 되겠습니다.
	
	- 그리기 방식이 다소 변화함에 따라 라이브러리 내에서 사용하는 모든 float 형식 필드들이 double 형식으로 변경되었습니다.
	
	- ImageResourceManager.CreateTempImage()를 통해 디버그 및 테스트 과정에서 사용할 단색 Image를 생성하여 사용할 수 있게 되었습니다.
	
	- InputManager가 이제 버튼 입력과 마우스 위치 변경을 '동일한 시각 기준'으로 accept합니다.
	
		> 이전에는 마우스 위치 변경이 버튼 입력에 비해 상대적으로 더 늦은 시점 기준으로 accept되었습니다.
		  (그래봤자 마이크로초 단위 차이였기 때문에 사실 여러분이 큰 차이를 느낄 가능성은 매우 희박합니다)
		
	- 각 클래스 및 요소에 대한 주석 도움말이 좀 더 자세하게 추가되었습니다.
	
	
v1.4 -> v1.5

	- Layer, RotatableLayer 클래스의 적중 테스트 관련 메서드에 있던 오류를 수정하였습니다.
		> 이제 trigger_hide 필드를 true로 설정한 내부 요소는 적중 테스트에 영향을 주지 않습니다.
		
	- AudioManager.GetLength()가 추가되었습니다.
		> 이 메서드는 주어진 이름으로 등록된 음원의 길이를 밀리초 단위로 반환합니다.
		> 만약 해당 이름의 음원이 등록되어 있지 않은 경우 -1을 반환합니다.
		
	- 전체 라이브러리 구조가 고정됨에 따라 LOOT의 각 요소에 대한 주석을 모아 둔 JavaDoc 페이지를 생성해 두었습니다.
		> LOOT project가 있는 폴더를 찾아 가면 안에 doc 폴더가 있으며 doc/index.html을 웹 브라우저로 열면 JavaDoc을 살펴볼 수 있습니다.
		  또는 doc/index.html을 오른쪽 클릭한 다음 Open with 메뉴에서 Web Browser를 선택하여 Eclipse 안에서 직접 JavaDoc을 살펴볼 수 있습니다. 
		
		> JavaDoc은 내부적으로 JavaScript를 사용하므로 웹 브라우저가 경고 메세지를 띄울 수 있습니다. (위험 요소는 없으니 그냥 허용하면 되겠습니다)

		
v1.5 -> v1.8

	- VisualObject.trigger_ignoreDuringHitTest가 추가되었습니다.
		> 이 필드의 값이 true인 경우 해당 요소 및 모든 하위 요소들은 Layer의 적중 테스트 대상에 포함되지 않습니다.
		> 다른 trigger계열 필드들과 마찬가지로, 해당 요소가 어떤 Layer에도 포함되어 있지 않다면 이 필드는 아무 영향도 주지 않습니다.
		> trigger_hide 필드가 true인 경우 해당 요소는 이 필드의 값에 관계 없이 적중 테스트 대상에 포함되지 않습니다(hide가 ignore보다 우선합니다). 
		  결론적으로 이 필드는 '보이긴 하지만 누를 수는 없는' 화면 상의 상위 계층을 만들 때,
		  또는,  요소에 반투명 이미지를 덧씌우면서도 적중 테스트 로직을 기존의 것으로 유지하고 싶을 때 주로 사용될 것입니다.
		
	- 이제 Layer계열 클래스들의 내부 요소들을 자신의 영역에 표시할 때 사용할 '원점'을 자유롭게 지정할 수 있습니다.
		> view_origin계열 필드들의 값을 사용하면 됩니다(원리는 RotatableLayer.rotate_origin계열 필드들과 동일합니다).
		
	- 이제 Viewport에서 3D 요소들을 그릴 때 z거리에 따른 크기 증감 배율을 자유롭게 지정할 수 있습니다.
		> view_exponent_z 필드를 1로 두면 이전과 동일하게 선형 비율을 사용합니다. 0 ~ 무한대 사이의 값을 사용할 수 있습니다.
		
		
v1.8 -> v1.9

	- 컴퓨터들의 성능이 이전 대비 꽤 좋아진 관계로 몇 가지 안정성 및 편의성 관련 기능을 추가했습니다.
